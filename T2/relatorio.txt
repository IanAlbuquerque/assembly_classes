Relatório do segundo trabalho de INF1018
========================================
	Integrantes: Eric Grinstein 1310428,
                     Ian Albuquerque 1310451



Seção 1: Erros/bugs conhecidos
-------------------------------------------
Não foram detectados erros no código gerado.



Seção 2: Funcionalidades e decisões tomadas pelo grupo
------------------------------------------------------
O programa criado é capaz de ler arquivos com a sintaxe 'Minima'
e retornar um ponteiro para a área de memória aonde as instruções correspondentes
estão armazenadas.
As funcionalidades suportadas pelo gerador são:

* O código Minima pode conter até 5 variáveis, podendo ser nomeadas de v0 a v9, arbitrariamente. 
	É possível que o programador de Minima escolha variáveis não sequenciais (por exemplo, v3, v4 e v9).
	Caso o usuário programador utilize mais de 5 variáveis, o programa aborta acusando tal violação.
* Variáveis (v0 a v9) podem ser inicializadas como a soma, diferença ou produto da combinação de 2 (e apenas 2) dos tipos abaixo:
	* Parâmetros (p0 a p4)
	* Variáveis (incluindo ela própria)
	* Números inteiros, chamados de constantes (denotados por $N, N sendo o número)
* Caso uma variável seja usada antes de inicializada, conterá lixo de memória. É tarefa do programador 
	se proteger contra tal evento.
* O código Minima pode conter até 5 parâmetros, nomeados de p0 a p4. Caso o programador utilize menos de 5 parâmetros,
	deverá utilizar os primeiros. Tal restrição não está presente, como visto acima, na utilização de variáveis.
* Parâmetros podem ter seu valor mudado, da mesma forma que variáveis (operação entre 2 parâmetros/variáveis/constantes).
* A função 'ret' é capaz de retornar um parâmetro, constante ou parâmetro.
* A função 'ifeq' recebe 2 valores (parametros/constante/variável) e o número de uma linha do código Minima. Caso os dois primeiros valores coincidam, o programa passa o controle para a linha recebida.

Seção 3: Testes realizados
--------------------------
O programa foi testado utilizando as funções disponibilizadas
no site da disciplina, assim como funções arbitrárias para teste
de cada uma das funcionalidades.
O programa portanto foi capaz de gerar, a partir de código Minima,
as funções presentes no site da disciplina:
	* fat(n) (fatorial)
	* teste de igualdade
	* (a * (b + c))

Seção 4: Comentário de pontos importantes do código
---------------------------------------------------------
A cada linha linha Minima lida, são escritos seus respectivos códigos de máquina no vetor
de bytes chamado 'code'. Cada linha de código é traduzida uma a uma para um código de máquina correspondente. Com exceção da instrução 'ifeq', cada linha corresponde a um trecho de código independente das outras linhas. Por exemplo: caso seja lida a linha Minima 'ret $12' deverá ser adicionado ao vetor 'code' os bytes b8 0c 00 00 00 e c3 (os 5 primeiros significam em assembly 'movl $12, %eax' e o último (c3) significa 'ret'.). O vetor tem tamanho de 50 vezes a maior instrução possível em mínima, visto que o código pode ter no máximo 50 linhas.

As variáveis (v0 a v9) são guardadas sequencialmente nas posições de memória -4(%ebp),-8(%ebp),-12(%ebp),-16(%ebp) e -20(%ebp). O array 'indexes_of_used_variables' armazena em cada posição o índice da variável sendo utilizada (0 a 9), havendo uma bijeção entre a posição da variável neste vetor e as posições na memória -4(%ebp),-8(%ebp),-12(%ebp),-16(%ebp) e -20(%ebp). 
	Exemplo: O código em Mínima abaixo resultará em indexes_of_used_variables[0] == 3 e indexes_of_used_variables[1] == 9. Dessa forma, o valor de v3 será sempre armazenado em -20(%ebp) e o valor de v9 em -16(%ebp).
		v3 := $1 + $1
		v9 := v3 + $1
		ret v3

As operações de soma, divisão e multiplicação funcionam da seguinte maneira: o primeiro valor é colocado no registrador %eax. Após isso, a operação é feita e seu resultado é guardado em tal registrador. Por último, o conteúdo de %eax é movido ou para a pilha, seja para depois de %ebp (no caso de parâmetro) ou antes (no caso de variável local).

A comparação (ifeq) só pode ser finalizada após o término da leitura do programa em mínima, visto que deve-se saber a distância até a linha de destino, que pode ainda não ter sido lida. Para a tradução deste comando, foi utilizado o código de máquina equivalente ao comando 'JMP FAR' do assembly, uma vez que este funciona tanto para desvios para linhas de código próximas, como para desvios para linhas de código distantes. Quando se lê uma instrução 'ifeq', coloca-se o código de máquina correspondente deixando o endereço relativo ao jump com um valor arbitrário. No final do programa, em que já se sabe o local das intruções correspondentes a cada linha de código, volta-se aos espaços deixados com valor arbitrário e completa-se com os bytes corretos para se realizar a instrução de desvio.

Foi criado um vetor auxiliar "ArrayOfJumpReferences", que guarda structs do tipo 'JumpReference', que contém o número do byte que deverá conter o valor relativo ao endereço de desvio (deixado com um valor arbitrário na primeira etapa do programa) e a linha de destino correspondente ao código Minima.
Após a leitura de todas linhas, são calculados os reais valores de jump, a diferença entre o endereço da linha onde o jump foi chamado e o destino do jump, salvando-se esse valor no local apropriado no vetor 'code', conforme apontado pela struct 'JumpReference'


Seção 5: Breve explicação das funções e estruturas de geracod.c
---------------------------------------------------------------

Union value: usada para facilitar a escrita de inteiros em modo little endian. 

static byte ebpOffsetValue:
	recebe o índice de um parâmetro/variável e calcula o valor que deve ser adicionado/subtraído (respectivamente) do registrador %ebp. Internamente, caso seja uma nova variável no programa em Mínima, atualiza o vetor 'indexes_of_used_variables' que relaciona as variáveis já utilizadas com suas posições na memória.

static int generateOpcodeReturn:
	gera o código de máquina correspondente ao comando em Mínima 'ret' seja ele utilizado com um parâmetro, variável ou constante.

static int generateOpcodeAtt: 
	gera o código de máquina correspondente ao comando de atribuição ':=' em Mínima. Inicialmente, gera-se o código para colocar valor do primeiro operando (da soma, multiplicação ou divisão) no registrador %eax, seja ele um parâmetro, variável ou constante. Em seguida, gera-se o código para somar o segundo operando ao valor no registrador %eax e por fim gera-se o código para mover-se o resultado ao parâmetro ou variável do lado esquerdo na expressão.

static int generateOpcodeHeader:
	gera o código de máquina para alocar espaço (20 bytes) para as variáveis locais e para organizar-se os registradores %esp e %ebp para trabalhar-se com a pilha de memória.

static int generateOpcodeIfEqual:
	gera o código correspondente ao comando em mínima 'ifeq'.

Seção 5.1: Breve explicação da função principal, geracod
---------------------------------------------------------------
funcp geracod (FILE *f) : 

Seção 5.1.1 - Variáveis locais
------------------------------
byte * code:
	referência para o código de máquina a ser gerado. É alocado dinâmicamente um espaço 50 vezes a maior instrução gerada por uma linha de código minima (8 bytes). É essa referência que será retornada pela função.

int indexes_of_used_variables e int num_of_used_variables: 
	usados para que seja possível a utilização de variáveis com números não consecutivos.

JumpReference array_of_jump_references int correspondent_opcode_location
	usados como referências para os trechos de bytes não foram preenchidos pelo tradutor do 'ifeq' e que devem ser alterados no final do programa de modo a prencher-se com os endereços relativos dos desvios corretos.

Seção 5.1.2 - Parte Lógica
--------------------------
Basicamente, a função lê cada linha e chama a função auxiliar (descritas no inicio da seção 5) correspondente a operação a ser feita, que gerará o código de máquina adequado a mesma. Lembrando que,
caso a operação seja um 'ifeq', não é possível gerar código completo até que todas as linhas tenham sido lidas completamente. Portanto, no final da função deve-se atualizar os bytes com as referências relativas corretas.

	







